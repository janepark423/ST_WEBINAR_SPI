
advance_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002684  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800286c  0800286c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800286c  0800286c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800286c  0800286c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08002874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200000cc  08002940  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002940  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000712b  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001442  00000000  00000000  00027227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00028670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00028e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b88c  00000000  00000000  000294e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a67  00000000  00000000  00044d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae77a  00000000  00000000  0004c7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000faf55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d7c  00000000  00000000  000fafa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002844 	.word	0x08002844

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	08002844 	.word	0x08002844

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb0d 	bl	800083a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f97d 	bl	800051e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa06 	bl	8000634 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000228:	f000 f9c6 	bl	80005b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  do {
  HAL_Delay(1);
 800022c:	2001      	movs	r0, #1
 800022e:	f000 fb75 	bl	800091c <HAL_Delay>
  if (eeprom_read_status(&status))
 8000232:	4816      	ldr	r0, [pc, #88]	; (800028c <main+0x74>)
 8000234:	f000 f830 	bl	8000298 <eeprom_read_status>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <main+0x2a>
  Error_Handler();
 800023e:	f000 fa2b 	bl	8000698 <Error_Handler>
  } while (status & EEPROM_STATUS_WIP_MASK);
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <main+0x74>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1ee      	bne.n	800022c <main+0x14>
  if (eeprom_write(0x0000, txbuf, TXBUF_SIZE) != 0x00)
 800024e:	22be      	movs	r2, #190	; 0xbe
 8000250:	490f      	ldr	r1, [pc, #60]	; (8000290 <main+0x78>)
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f898 	bl	8000388 <eeprom_write>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <main+0x4a>
  Error_Handler();
 800025e:	f000 fa1b 	bl	8000698 <Error_Handler>
  if (eeprom_read(0x0000, rxbuf, RXBUF_SIZE) != 0x00)
 8000262:	22be      	movs	r2, #190	; 0xbe
 8000264:	490b      	ldr	r1, [pc, #44]	; (8000294 <main+0x7c>)
 8000266:	2000      	movs	r0, #0
 8000268:	f000 f84a 	bl	8000300 <eeprom_read>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <main+0x5e>
  Error_Handler();
 8000272:	f000 fa11 	bl	8000698 <Error_Handler>
  if (bufcmp(txbuf, rxbuf, RXBUF_SIZE))
 8000276:	22be      	movs	r2, #190	; 0xbe
 8000278:	4906      	ldr	r1, [pc, #24]	; (8000294 <main+0x7c>)
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <main+0x78>)
 800027c:	f000 f930 	bl	80004e0 <bufcmp>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <main+0x72>
  Error_Handler();
 8000286:	f000 fa07 	bl	8000698 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028a:	e7fe      	b.n	800028a <main+0x72>
 800028c:	2000020a 	.word	0x2000020a
 8000290:	20000000 	.word	0x20000000
 8000294:	2000014c 	.word	0x2000014c

08000298 <eeprom_read_status>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static int eeprom_read_status(uint8_t *status)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
uint8_t inst = EEPROM_STATUS_READ;
 80002a0:	2305      	movs	r3, #5
 80002a2:	73fb      	strb	r3, [r7, #15]
EEPROM_ACCESS_BEGIN();
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f000 fdbd 	bl	8000e2c <HAL_GPIO_WritePin>
if (HAL_SPI_Transmit(&hspi1, &inst, 1, 100) != HAL_OK)
 80002b2:	f107 010f 	add.w	r1, r7, #15
 80002b6:	2364      	movs	r3, #100	; 0x64
 80002b8:	2201      	movs	r2, #1
 80002ba:	4810      	ldr	r0, [pc, #64]	; (80002fc <eeprom_read_status+0x64>)
 80002bc:	f001 fc29 	bl	8001b12 <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d002      	beq.n	80002cc <eeprom_read_status+0x34>
return -1;
 80002c6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ca:	e013      	b.n	80002f4 <eeprom_read_status+0x5c>
if (HAL_SPI_Receive(&hspi1, status, 1, 100) != HAL_OK)
 80002cc:	2364      	movs	r3, #100	; 0x64
 80002ce:	2201      	movs	r2, #1
 80002d0:	6879      	ldr	r1, [r7, #4]
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <eeprom_read_status+0x64>)
 80002d4:	f001 fd8b 	bl	8001dee <HAL_SPI_Receive>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <eeprom_read_status+0x4c>
return -2;
 80002de:	f06f 0301 	mvn.w	r3, #1
 80002e2:	e007      	b.n	80002f4 <eeprom_read_status+0x5c>
EEPROM_ACCESS_END();
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f000 fd9d 	bl	8000e2c <HAL_GPIO_WritePin>
return 0;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000e8 	.word	0x200000e8

08000300 <eeprom_read>:

static int eeprom_read(uint16_t address, uint8_t *dst, int size)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
 800030c:	81fb      	strh	r3, [r7, #14]
uint8_t inst[2];
inst[0] = (uint8_t)(((address >> 8) << 3) | (EEPROM_READ));
 800030e:	89fb      	ldrh	r3, [r7, #14]
 8000310:	0a1b      	lsrs	r3, r3, #8
 8000312:	b29b      	uxth	r3, r3
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	b25b      	sxtb	r3, r3
 8000318:	f043 0303 	orr.w	r3, r3, #3
 800031c:	b25b      	sxtb	r3, r3
 800031e:	b2db      	uxtb	r3, r3
 8000320:	753b      	strb	r3, [r7, #20]
inst[1] = (uint8_t)((address) & (0x00FF));
 8000322:	89fb      	ldrh	r3, [r7, #14]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	757b      	strb	r3, [r7, #21]
EEPROM_ACCESS_BEGIN();
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000332:	f000 fd7b 	bl	8000e2c <HAL_GPIO_WritePin>
if (HAL_SPI_Transmit(&hspi1, inst, 2, 100) != HAL_OK)
 8000336:	f107 0114 	add.w	r1, r7, #20
 800033a:	2364      	movs	r3, #100	; 0x64
 800033c:	2202      	movs	r2, #2
 800033e:	4811      	ldr	r0, [pc, #68]	; (8000384 <eeprom_read+0x84>)
 8000340:	f001 fbe7 	bl	8001b12 <HAL_SPI_Transmit>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <eeprom_read+0x50>
return -1;
 800034a:	f04f 33ff 	mov.w	r3, #4294967295
 800034e:	e014      	b.n	800037a <eeprom_read+0x7a>
if (HAL_SPI_Receive(&hspi1, dst, size, 100) != HAL_OK)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	b29a      	uxth	r2, r3
 8000354:	2364      	movs	r3, #100	; 0x64
 8000356:	68b9      	ldr	r1, [r7, #8]
 8000358:	480a      	ldr	r0, [pc, #40]	; (8000384 <eeprom_read+0x84>)
 800035a:	f001 fd48 	bl	8001dee <HAL_SPI_Receive>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d002      	beq.n	800036a <eeprom_read+0x6a>
return -2;
 8000364:	f06f 0301 	mvn.w	r3, #1
 8000368:	e007      	b.n	800037a <eeprom_read+0x7a>
EEPROM_ACCESS_END();
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f000 fd5a 	bl	8000e2c <HAL_GPIO_WritePin>
return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000e8 	.word	0x200000e8

08000388 <eeprom_write>:

static int eeprom_write(uint16_t address, uint8_t *src, int size)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	81fb      	strh	r3, [r7, #14]
uint8_t inst[2], status;
int remain = size, wbytes = 0;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	61fb      	str	r3, [r7, #28]
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
while (remain > 0) {
 800039e:	e093      	b.n	80004c8 <eeprom_write+0x140>
/* write enable first */
inst[0] = EEPROM_WRITE_ENABLE;
 80003a0:	2306      	movs	r3, #6
 80003a2:	753b      	strb	r3, [r7, #20]
EEPROM_ACCESS_BEGIN();
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f000 fd3d 	bl	8000e2c <HAL_GPIO_WritePin>
if (HAL_SPI_Transmit(&hspi1, inst, 1, 100) != HAL_OK)
 80003b2:	f107 0114 	add.w	r1, r7, #20
 80003b6:	2364      	movs	r3, #100	; 0x64
 80003b8:	2201      	movs	r2, #1
 80003ba:	4848      	ldr	r0, [pc, #288]	; (80004dc <eeprom_write+0x154>)
 80003bc:	f001 fba9 	bl	8001b12 <HAL_SPI_Transmit>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <eeprom_write+0x44>
return -1;
 80003c6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ca:	e082      	b.n	80004d2 <eeprom_write+0x14a>
EEPROM_ACCESS_END();
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d6:	f000 fd29 	bl	8000e2c <HAL_GPIO_WritePin>
/* write datas */
wbytes = (remain > EEPROM_PAGE_SIZE) ? EEPROM_PAGE_SIZE : remain;
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	2b10      	cmp	r3, #16
 80003de:	bfa8      	it	ge
 80003e0:	2310      	movge	r3, #16
 80003e2:	61bb      	str	r3, [r7, #24]
inst[0] = (uint8_t)(((address >> 8) << 3) | (EEPROM_WRITE));
 80003e4:	89fb      	ldrh	r3, [r7, #14]
 80003e6:	0a1b      	lsrs	r3, r3, #8
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	f043 0302 	orr.w	r3, r3, #2
 80003f2:	b25b      	sxtb	r3, r3
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	753b      	strb	r3, [r7, #20]
inst[1] = (uint8_t)((address) & (0x00FF));
 80003f8:	89fb      	ldrh	r3, [r7, #14]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	757b      	strb	r3, [r7, #21]
EEPROM_ACCESS_BEGIN();
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fd10 	bl	8000e2c <HAL_GPIO_WritePin>
if (HAL_SPI_Transmit(&hspi1, inst, 2, 100) != HAL_OK)
 800040c:	f107 0114 	add.w	r1, r7, #20
 8000410:	2364      	movs	r3, #100	; 0x64
 8000412:	2202      	movs	r2, #2
 8000414:	4831      	ldr	r0, [pc, #196]	; (80004dc <eeprom_write+0x154>)
 8000416:	f001 fb7c 	bl	8001b12 <HAL_SPI_Transmit>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <eeprom_write+0x9e>
return -2;
 8000420:	f06f 0301 	mvn.w	r3, #1
 8000424:	e055      	b.n	80004d2 <eeprom_write+0x14a>
if (HAL_SPI_Transmit(&hspi1, src, EEPROM_PAGE_SIZE, 1000) != HAL_OK)
 8000426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042a:	2210      	movs	r2, #16
 800042c:	68b9      	ldr	r1, [r7, #8]
 800042e:	482b      	ldr	r0, [pc, #172]	; (80004dc <eeprom_write+0x154>)
 8000430:	f001 fb6f 	bl	8001b12 <HAL_SPI_Transmit>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <eeprom_write+0xb8>
return -3;
 800043a:	f06f 0302 	mvn.w	r3, #2
 800043e:	e048      	b.n	80004d2 <eeprom_write+0x14a>
EEPROM_ACCESS_END();
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044a:	f000 fcef 	bl	8000e2c <HAL_GPIO_WritePin>


do {
HAL_Delay(1);
 800044e:	2001      	movs	r0, #1
 8000450:	f000 fa64 	bl	800091c <HAL_Delay>
if (eeprom_read_status(&status))
 8000454:	f107 0313 	add.w	r3, r7, #19
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff1d 	bl	8000298 <eeprom_read_status>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d002      	beq.n	800046a <eeprom_write+0xe2>
return -4;
 8000464:	f06f 0303 	mvn.w	r3, #3
 8000468:	e033      	b.n	80004d2 <eeprom_write+0x14a>
} while (status & EEPROM_STATUS_WIP_MASK);
 800046a:	7cfb      	ldrb	r3, [r7, #19]
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1ec      	bne.n	800044e <eeprom_write+0xc6>
/* write disable */
EEPROM_ACCESS_BEGIN();
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f000 fcd5 	bl	8000e2c <HAL_GPIO_WritePin>
inst[0] = EEPROM_WRITE_DISABLE;
 8000482:	2304      	movs	r3, #4
 8000484:	753b      	strb	r3, [r7, #20]
if (HAL_SPI_Transmit(&hspi1, inst, 1, 100) != HAL_OK)
 8000486:	f107 0114 	add.w	r1, r7, #20
 800048a:	2364      	movs	r3, #100	; 0x64
 800048c:	2201      	movs	r2, #1
 800048e:	4813      	ldr	r0, [pc, #76]	; (80004dc <eeprom_write+0x154>)
 8000490:	f001 fb3f 	bl	8001b12 <HAL_SPI_Transmit>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <eeprom_write+0x118>
return -5;
 800049a:	f06f 0304 	mvn.w	r3, #4
 800049e:	e018      	b.n	80004d2 <eeprom_write+0x14a>
EEPROM_ACCESS_END();
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004aa:	f000 fcbf 	bl	8000e2c <HAL_GPIO_WritePin>
src = (uint8_t *)((int)src + wbytes);
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	4413      	add	r3, r2
 80004b4:	60bb      	str	r3, [r7, #8]
address += wbytes;
 80004b6:	69bb      	ldr	r3, [r7, #24]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	4413      	add	r3, r2
 80004be:	81fb      	strh	r3, [r7, #14]
remain -= wbytes;
 80004c0:	69fa      	ldr	r2, [r7, #28]
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	61fb      	str	r3, [r7, #28]
while (remain > 0) {
 80004c8:	69fb      	ldr	r3, [r7, #28]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f73f af68 	bgt.w	80003a0 <eeprom_write+0x18>
}
return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3720      	adds	r7, #32
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000e8 	.word	0x200000e8

080004e0 <bufcmp>:


static int bufcmp(uint8_t* buf1, uint8_t *buf2, int size)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
while (size--)
 80004ec:	e00b      	b.n	8000506 <bufcmp+0x26>
if (*buf1++ != *buf2++)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	60fa      	str	r2, [r7, #12]
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	1c59      	adds	r1, r3, #1
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d001      	beq.n	8000506 <bufcmp+0x26>
return size;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	e005      	b.n	8000512 <bufcmp+0x32>
while (size--)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1ee      	bne.n	80004ee <bufcmp+0xe>
return 0;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <SystemClock_Config>:




void SystemClock_Config(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b094      	sub	sp, #80	; 0x50
 8000522:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	2238      	movs	r2, #56	; 0x38
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f002 f981 	bl	8002834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000544:	f000 fc8a 	bl	8000e5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000548:	2302      	movs	r3, #2
 800054a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000552:	2340      	movs	r3, #64	; 0x40
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800055e:	2301      	movs	r3, #1
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000562:	230a      	movs	r3, #10
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fd24 	bl	8000fc4 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000582:	f000 f889 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2303      	movs	r3, #3
 800058c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f828 	bl	80015f4 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005aa:	f000 f875 	bl	8000698 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_SPI1_Init+0x74>)
 80005be:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <MX_SPI1_Init+0x78>)
 80005c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_SPI1_Init+0x74>)
 80005c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_SPI1_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_SPI1_Init+0x74>)
 80005d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_SPI1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_SPI1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_SPI1_Init+0x74>)
 80005e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_SPI1_Init+0x74>)
 80005ee:	2218      	movs	r2, #24
 80005f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_SPI1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_SPI1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_SPI1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_SPI1_Init+0x74>)
 8000606:	2207      	movs	r2, #7
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_SPI1_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_SPI1_Init+0x74>)
 8000612:	2208      	movs	r2, #8
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_SPI1_Init+0x74>)
 8000618:	f001 f9d0 	bl	80019bc <HAL_SPI_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000622:	f000 f839 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000e8 	.word	0x200000e8
 8000630:	40013000 	.word	0x40013000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x60>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <MX_GPIO_Init+0x60>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x60>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f000 fbdf 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800066e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f000 fa4e 	bl	8000b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_MspInit+0x44>)
 80006ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6613      	str	r3, [r2, #96]	; 0x60
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x44>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_MspInit+0x44>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6593      	str	r3, [r2, #88]	; 0x58
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x44>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006da:	f000 fc63 	bl	8000fa4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <HAL_SPI_MspInit+0x7c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d128      	bne.n	8000760 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <HAL_SPI_MspInit+0x80>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <HAL_SPI_MspInit+0x80>)
 8000714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000718:	6613      	str	r3, [r2, #96]	; 0x60
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_SPI_MspInit+0x80>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_SPI_MspInit+0x80>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <HAL_SPI_MspInit+0x80>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_SPI_MspInit+0x80>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800073e:	23e0      	movs	r3, #224	; 0xe0
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	2302      	movs	r3, #2
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800074e:	2305      	movs	r3, #5
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f000 f9e4 	bl	8000b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40013000 	.word	0x40013000
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f890 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0b      	ldr	r4, [pc, #44]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffd7 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 ffe9 	bl	80027ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081a:	f7ff fcfd 	bl	8000218 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800082c:	08002874 	.word	0x08002874
  ldr r2, =_sbss
 8000830:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000834:	20000210 	.word	0x20000210

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>

0800083a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f93d 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084a:	2000      	movs	r0, #0
 800084c:	f000 f80e 	bl	800086c <HAL_InitTick>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	e001      	b.n	8000860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800085c:	f7ff ff22 	bl	80006a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000860:	79fb      	ldrb	r3, [r7, #7]

}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_InitTick+0x68>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d022      	beq.n	80008c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_InitTick+0x6c>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <HAL_InitTick+0x68>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800088c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000890:	fbb2 f3f3 	udiv	r3, r2, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f93a 	bl	8000b0e <HAL_SYSTICK_Config>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10f      	bne.n	80008c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b0f      	cmp	r3, #15
 80008a4:	d809      	bhi.n	80008ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a6:	2200      	movs	r2, #0
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	f04f 30ff 	mov.w	r0, #4294967295
 80008ae:	f000 f914 	bl	8000ada <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_InitTick+0x70>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	e007      	b.n	80008ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	e004      	b.n	80008ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e001      	b.n	80008ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000c8 	.word	0x200000c8
 80008d8:	200000c0 	.word	0x200000c0
 80008dc:	200000c4 	.word	0x200000c4

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x1c>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x20>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a03      	ldr	r2, [pc, #12]	; (80008fc <HAL_IncTick+0x1c>)
 80008f0:	6013      	str	r3, [r2, #0]
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	2000020c 	.word	0x2000020c
 8000900:	200000c8 	.word	0x200000c8

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2000020c 	.word	0x2000020c

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d004      	beq.n	8000940 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_Delay+0x40>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000940:	bf00      	nop
 8000942:	f7ff ffdf 	bl	8000904 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	429a      	cmp	r2, r3
 8000950:	d8f7      	bhi.n	8000942 <HAL_Delay+0x26>
  {
  }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000c8 	.word	0x200000c8

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff47 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff5e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff90 	bl	8000a18 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5f 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb2 	bl	8000a80 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b36:	e15a      	b.n	8000dee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 814c 	beq.w	8000de8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d005      	beq.n	8000b68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	f003 0201 	and.w	r2, r3, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d017      	beq.n	8000c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d123      	bne.n	8000c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	6939      	ldr	r1, [r7, #16]
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0203 	and.w	r2, r3, #3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 80a6 	beq.w	8000de8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9c:	4b5b      	ldr	r3, [pc, #364]	; (8000e0c <HAL_GPIO_Init+0x2e4>)
 8000c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca0:	4a5a      	ldr	r2, [pc, #360]	; (8000e0c <HAL_GPIO_Init+0x2e4>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca8:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <HAL_GPIO_Init+0x2e4>)
 8000caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb4:	4a56      	ldr	r2, [pc, #344]	; (8000e10 <HAL_GPIO_Init+0x2e8>)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cde:	d01f      	beq.n	8000d20 <HAL_GPIO_Init+0x1f8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <HAL_GPIO_Init+0x2ec>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d019      	beq.n	8000d1c <HAL_GPIO_Init+0x1f4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x1f0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x2f4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1ec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_GPIO_Init+0x2f8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1e8>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2fc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1e4>
 8000d08:	2305      	movs	r3, #5
 8000d0a:	e00a      	b.n	8000d22 <HAL_GPIO_Init+0x1fa>
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	e008      	b.n	8000d22 <HAL_GPIO_Init+0x1fa>
 8000d10:	2304      	movs	r3, #4
 8000d12:	e006      	b.n	8000d22 <HAL_GPIO_Init+0x1fa>
 8000d14:	2303      	movs	r3, #3
 8000d16:	e004      	b.n	8000d22 <HAL_GPIO_Init+0x1fa>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0x1fa>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <HAL_GPIO_Init+0x1fa>
 8000d20:	2300      	movs	r3, #0
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	f002 0203 	and.w	r2, r2, #3
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	4093      	lsls	r3, r2
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d32:	4937      	ldr	r1, [pc, #220]	; (8000e10 <HAL_GPIO_Init+0x2e8>)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d40:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d64:	4a30      	ldr	r2, [pc, #192]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d8e:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	3301      	adds	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa22 f303 	lsr.w	r3, r2, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f47f ae9d 	bne.w	8000b38 <HAL_GPIO_Init+0x10>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	48000400 	.word	0x48000400
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	48000c00 	.word	0x48000c00
 8000e20:	48001000 	.word	0x48001000
 8000e24:	48001400 	.word	0x48001400
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d141      	bne.n	8000eee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e6a:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e76:	d131      	bne.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e7e:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e90:	4a41      	ldr	r2, [pc, #260]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2232      	movs	r2, #50	; 0x32
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4a3f      	ldr	r2, [pc, #252]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	0c9b      	lsrs	r3, r3, #18
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eae:	e002      	b.n	8000eb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec2:	d102      	bne.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f2      	bne.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eca:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed6:	d158      	bne.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e057      	b.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000eec:	e04d      	b.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef4:	d141      	bne.n	8000f7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f02:	d131      	bne.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2232      	movs	r2, #50	; 0x32
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	0c9b      	lsrs	r3, r3, #18
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f3a:	e002      	b.n	8000f42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4e:	d102      	bne.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f2      	bne.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f62:	d112      	bne.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e011      	b.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f78:	e007      	b.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40007000 	.word	0x40007000
 8000f9c:	200000c0 	.word	0x200000c0
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb2:	6093      	str	r3, [r2, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e306      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d075      	beq.n	80010ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe2:	4b97      	ldr	r3, [pc, #604]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fec:	4b94      	ldr	r3, [pc, #592]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	d102      	bne.n	8001002 <HAL_RCC_OscConfig+0x3e>
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d002      	beq.n	8001008 <HAL_RCC_OscConfig+0x44>
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d10b      	bne.n	8001020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	4b8d      	ldr	r3, [pc, #564]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d05b      	beq.n	80010cc <HAL_RCC_OscConfig+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d157      	bne.n	80010cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e2e1      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d106      	bne.n	8001038 <HAL_RCC_OscConfig+0x74>
 800102a:	4b85      	ldr	r3, [pc, #532]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a84      	ldr	r2, [pc, #528]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e01d      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x98>
 8001042:	4b7f      	ldr	r3, [pc, #508]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a7e      	ldr	r2, [pc, #504]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 800105c:	4b78      	ldr	r3, [pc, #480]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a77      	ldr	r2, [pc, #476]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b75      	ldr	r3, [pc, #468]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a74      	ldr	r2, [pc, #464]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fc42 	bl	8000904 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fc3e 	bl	8000904 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e2a6      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001096:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0xc0>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc2e 	bl	8000904 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fc2a 	bl	8000904 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e292      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010be:	4b60      	ldr	r3, [pc, #384]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0xe8>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d075      	beq.n	80011c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010da:	4b59      	ldr	r3, [pc, #356]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e4:	4b56      	ldr	r3, [pc, #344]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d102      	bne.n	80010fa <HAL_RCC_OscConfig+0x136>
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d002      	beq.n	8001100 <HAL_RCC_OscConfig+0x13c>
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d11f      	bne.n	8001140 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <HAL_RCC_OscConfig+0x154>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e265      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b49      	ldr	r3, [pc, #292]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	061b      	lsls	r3, r3, #24
 8001126:	4946      	ldr	r1, [pc, #280]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800112c:	4b45      	ldr	r3, [pc, #276]	; (8001244 <HAL_RCC_OscConfig+0x280>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fb9b 	bl	800086c <HAL_InitTick>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d043      	beq.n	80011c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e251      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d023      	beq.n	8001190 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a3c      	ldr	r2, [pc, #240]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001154:	f7ff fbd6 	bl	8000904 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fbd2 	bl	8000904 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e23a      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	061b      	lsls	r3, r3, #24
 8001188:	492d      	ldr	r1, [pc, #180]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]
 800118e:	e01a      	b.n	80011c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2a      	ldr	r2, [pc, #168]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001196:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fbb2 	bl	8000904 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fbae 	bl	8000904 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e216      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x1e0>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d041      	beq.n	8001256 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01c      	beq.n	8001214 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 80011dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e0:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fb8b 	bl	8000904 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff fb87 	bl	8000904 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1ef      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0ef      	beq.n	80011f2 <HAL_RCC_OscConfig+0x22e>
 8001212:	e020      	b.n	8001256 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_RCC_OscConfig+0x27c>)
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001224:	f7ff fb6e 	bl	8000904 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800122a:	e00d      	b.n	8001248 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fb6a 	bl	8000904 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d906      	bls.n	8001248 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1d2      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001248:	4b8c      	ldr	r3, [pc, #560]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800124a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1ea      	bne.n	800122c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80a6 	beq.w	80013b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001268:	4b84      	ldr	r3, [pc, #528]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_OscConfig+0x2b4>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x2b6>
 8001278:	2300      	movs	r3, #0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00d      	beq.n	800129a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b7f      	ldr	r3, [pc, #508]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	4a7e      	ldr	r2, [pc, #504]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
 800128a:	4b7c      	ldr	r3, [pc, #496]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129a:	4b79      	ldr	r3, [pc, #484]	; (8001480 <HAL_RCC_OscConfig+0x4bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x4bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x4bc>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb27 	bl	8000904 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ba:	f7ff fb23 	bl	8000904 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e18b      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012cc:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x4bc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d108      	bne.n	80012f2 <HAL_RCC_OscConfig+0x32e>
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80012e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e6:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f0:	e024      	b.n	800133c <HAL_RCC_OscConfig+0x378>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d110      	bne.n	800131c <HAL_RCC_OscConfig+0x358>
 80012fa:	4b60      	ldr	r3, [pc, #384]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80012fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001300:	4a5e      	ldr	r2, [pc, #376]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800130c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001310:	4a5a      	ldr	r2, [pc, #360]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800131a:	e00f      	b.n	800133c <HAL_RCC_OscConfig+0x378>
 800131c:	4b57      	ldr	r3, [pc, #348]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	4a56      	ldr	r2, [pc, #344]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a52      	ldr	r2, [pc, #328]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d016      	beq.n	8001372 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fade 	bl	8000904 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fada 	bl	8000904 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e140      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0ed      	beq.n	800134c <HAL_RCC_OscConfig+0x388>
 8001370:	e015      	b.n	800139e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001372:	f7ff fac7 	bl	8000904 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001378:	e00a      	b.n	8001390 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fac3 	bl	8000904 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f241 3288 	movw	r2, #5000	; 0x1388
 8001388:	4293      	cmp	r3, r2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e129      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1ed      	bne.n	800137a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a4:	4b35      	ldr	r3, [pc, #212]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	4a34      	ldr	r2, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80013aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d03c      	beq.n	8001436 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01c      	beq.n	80013fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80013c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ca:	4a2c      	ldr	r2, [pc, #176]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fa96 	bl	8000904 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013dc:	f7ff fa92 	bl	8000904 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0fa      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 80013f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ef      	beq.n	80013dc <HAL_RCC_OscConfig+0x418>
 80013fc:	e01b      	b.n	8001436 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001404:	4a1d      	ldr	r2, [pc, #116]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140e:	f7ff fa79 	bl	8000904 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001416:	f7ff fa75 	bl	8000904 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0dd      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800142a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ef      	bne.n	8001416 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80d1 	beq.w	80015e2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b0c      	cmp	r3, #12
 800144a:	f000 808b 	beq.w	8001564 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d15e      	bne.n	8001514 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_RCC_OscConfig+0x4b8>)
 800145c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fa4f 	bl	8000904 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001468:	e00c      	b.n	8001484 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fa4b 	bl	8000904 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d905      	bls.n	8001484 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0b3      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
 800147c:	40021000 	.word	0x40021000
 8001480:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ec      	bne.n	800146a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <HAL_RCC_OscConfig+0x62c>)
 8001496:	4013      	ands	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6a11      	ldr	r1, [r2, #32]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a0:	3a01      	subs	r2, #1
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	4311      	orrs	r1, r2
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014aa:	0212      	lsls	r2, r2, #8
 80014ac:	4311      	orrs	r1, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014b2:	0852      	lsrs	r2, r2, #1
 80014b4:	3a01      	subs	r2, #1
 80014b6:	0552      	lsls	r2, r2, #21
 80014b8:	4311      	orrs	r1, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014be:	0852      	lsrs	r2, r2, #1
 80014c0:	3a01      	subs	r2, #1
 80014c2:	0652      	lsls	r2, r2, #25
 80014c4:	4311      	orrs	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014ca:	06d2      	lsls	r2, r2, #27
 80014cc:	430a      	orrs	r2, r1
 80014ce:	4947      	ldr	r1, [pc, #284]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b45      	ldr	r3, [pc, #276]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a44      	ldr	r2, [pc, #272]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 80014da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014e0:	4b42      	ldr	r3, [pc, #264]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a41      	ldr	r2, [pc, #260]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 80014e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fa0a 	bl	8000904 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fa06 	bl	8000904 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e06e      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x530>
 8001512:	e066      	b.n	80015e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a34      	ldr	r2, [pc, #208]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 800151a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800151e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a31      	ldr	r2, [pc, #196]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a2e      	ldr	r2, [pc, #184]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001532:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff f9e2 	bl	8000904 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f9de 	bl	8000904 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e046      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x580>
 8001562:	e03e      	b.n	80015e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e039      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_RCC_OscConfig+0x628>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	429a      	cmp	r2, r3
 8001582:	d12c      	bne.n	80015de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	3b01      	subs	r3, #1
 8001590:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d123      	bne.n	80015de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d11b      	bne.n	80015de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d113      	bne.n	80015de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	3b01      	subs	r3, #1
 80015c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d109      	bne.n	80015de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	019f800c 	.word	0x019f800c

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e11e      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800160c:	4b91      	ldr	r3, [pc, #580]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d910      	bls.n	800163c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 020f 	bic.w	r2, r3, #15
 8001622:	498c      	ldr	r1, [pc, #560]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b8a      	ldr	r3, [pc, #552]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e106      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d073      	beq.n	8001730 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d129      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001650:	4b81      	ldr	r3, [pc, #516]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0f4      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001660:	f000 f966 	bl	8001930 <RCC_GetSysClockFreqFromPLLSource>
 8001664:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4a7c      	ldr	r2, [pc, #496]	; (800185c <HAL_RCC_ClockConfig+0x268>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d93f      	bls.n	80016ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800166e:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001682:	2b00      	cmp	r3, #0
 8001684:	d033      	beq.n	80016ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800168a:	2b00      	cmp	r3, #0
 800168c:	d12f      	bne.n	80016ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800168e:	4b72      	ldr	r3, [pc, #456]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001696:	4a70      	ldr	r2, [pc, #448]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e024      	b.n	80016ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0c6      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0be      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80016cc:	f000 f8ce 	bl	800186c <HAL_RCC_GetSysClockFreq>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4a61      	ldr	r2, [pc, #388]	; (800185c <HAL_RCC_ClockConfig+0x268>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d909      	bls.n	80016ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016e2:	4a5d      	ldr	r2, [pc, #372]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4957      	ldr	r1, [pc, #348]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001700:	f7ff f900 	bl	8000904 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff f8fc 	bl	8000904 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e095      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a42      	ldr	r2, [pc, #264]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 800174e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001752:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001760:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 800176a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800176e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4936      	ldr	r1, [pc, #216]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
 8001782:	e008      	b.n	8001796 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b80      	cmp	r3, #128	; 0x80
 8001788:	d105      	bne.n	8001796 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001794:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d21d      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 020f 	bic.w	r2, r3, #15
 80017ac:	4929      	ldr	r1, [pc, #164]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017b4:	f7ff f8a6 	bl	8000904 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff f8a2 	bl	8000904 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e03b      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_RCC_ClockConfig+0x260>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1ed      	bne.n	80017bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4917      	ldr	r1, [pc, #92]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490f      	ldr	r1, [pc, #60]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181e:	f000 f825 	bl	800186c <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490c      	ldr	r1, [pc, #48]	; (8001860 <HAL_RCC_ClockConfig+0x26c>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_RCC_ClockConfig+0x270>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x274>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f812 	bl	800086c <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000
 8001858:	40021000 	.word	0x40021000
 800185c:	04c4b400 	.word	0x04c4b400
 8001860:	0800285c 	.word	0x0800285c
 8001864:	200000c0 	.word	0x200000c0
 8001868:	200000c4 	.word	0x200000c4

0800186c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d102      	bne.n	8001884 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	e047      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d102      	bne.n	8001896 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e03e      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d136      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d10c      	bne.n	80018da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018c0:	4a1a      	ldr	r2, [pc, #104]	; (800192c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	4a16      	ldr	r2, [pc, #88]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ca:	68d2      	ldr	r2, [r2, #12]
 80018cc:	0a12      	lsrs	r2, r2, #8
 80018ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
      break;
 80018d8:	e00c      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e4:	68d2      	ldr	r2, [r2, #12]
 80018e6:	0a12      	lsrs	r2, r2, #8
 80018e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
      break;
 80018f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0e5b      	lsrs	r3, r3, #25
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e001      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001914:	693b      	ldr	r3, [r7, #16]
}
 8001916:	4618      	mov	r0, r3
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	00f42400 	.word	0x00f42400
 800192c:	016e3600 	.word	0x016e3600

08001930 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d10c      	bne.n	800196e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800195e:	68d2      	ldr	r2, [r2, #12]
 8001960:	0a12      	lsrs	r2, r2, #8
 8001962:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
    break;
 800196c:	e00c      	b.n	8001988 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	0a12      	lsrs	r2, r2, #8
 800197c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
    break;
 8001986:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0e5b      	lsrs	r3, r3, #25
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000
 80019b4:	016e3600 	.word	0x016e3600
 80019b8:	00f42400 	.word	0x00f42400

080019bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e09d      	b.n	8001b0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d108      	bne.n	80019e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019de:	d009      	beq.n	80019f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
 80019e6:	e005      	b.n	80019f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fe6c 	bl	80006ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a34:	d902      	bls.n	8001a3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e002      	b.n	8001a42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001a4a:	d007      	beq.n	8001a5c <HAL_SPI_Init+0xa0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a54:	d002      	beq.n	8001a5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	ea42 0103 	orr.w	r1, r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	f003 0204 	and.w	r2, r3, #4
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ad8:	ea42 0103 	orr.w	r1, r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b088      	sub	sp, #32
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_SPI_Transmit+0x22>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e158      	b.n	8001de6 <HAL_SPI_Transmit+0x2d4>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b3c:	f7fe fee2 	bl	8000904 <HAL_GetTick>
 8001b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d002      	beq.n	8001b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b56:	e13d      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_SPI_Transmit+0x52>
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b68:	e134      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b40      	cmp	r3, #64	; 0x40
 8001be2:	d007      	beq.n	8001bf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bfc:	d94b      	bls.n	8001c96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_SPI_Transmit+0xfa>
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d13e      	bne.n	8001c8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	1c9a      	adds	r2, r3, #2
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c30:	e02b      	b.n	8001c8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d112      	bne.n	8001c66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	1c9a      	adds	r2, r3, #2
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c64:	e011      	b.n	8001c8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c66:	f7fe fe4d 	bl	8000904 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d803      	bhi.n	8001c7e <HAL_SPI_Transmit+0x16c>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d102      	bne.n	8001c84 <HAL_SPI_Transmit+0x172>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c88:	e0a4      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ce      	bne.n	8001c32 <HAL_SPI_Transmit+0x120>
 8001c94:	e07c      	b.n	8001d90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_SPI_Transmit+0x192>
 8001c9e:	8afb      	ldrh	r3, [r7, #22]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d170      	bne.n	8001d86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d912      	bls.n	8001cd4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	1c9a      	adds	r2, r3, #2
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b02      	subs	r3, #2
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cd2:	e058      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001cfa:	e044      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d12b      	bne.n	8001d62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d912      	bls.n	8001d3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	1c9a      	adds	r2, r3, #2
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b02      	subs	r3, #2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d38:	e025      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	330c      	adds	r3, #12
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d60:	e011      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d62:	f7fe fdcf 	bl	8000904 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d803      	bhi.n	8001d7a <HAL_SPI_Transmit+0x268>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d102      	bne.n	8001d80 <HAL_SPI_Transmit+0x26e>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d84:	e026      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1b5      	bne.n	8001cfc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fce3 	bl	8002760 <SPI_EndRxTxTransaction>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	77fb      	strb	r3, [r7, #31]
 8001dd0:	e000      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001dd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b088      	sub	sp, #32
 8001df2:	af02      	add	r7, sp, #8
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e0a:	d112      	bne.n	8001e32 <HAL_SPI_Receive+0x44>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10e      	bne.n	8001e32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2204      	movs	r2, #4
 8001e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f910 	bl	800204e <HAL_SPI_TransmitReceive>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	e109      	b.n	8002046 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_SPI_Receive+0x52>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e102      	b.n	8002046 <HAL_SPI_Receive+0x258>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e48:	f7fe fd5c 	bl	8000904 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d002      	beq.n	8001e60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e5e:	e0e9      	b.n	8002034 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_SPI_Receive+0x7e>
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e70:	e0e0      	b.n	8002034 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2204      	movs	r2, #4
 8001e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	88fa      	ldrh	r2, [r7, #6]
 8001e92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ebc:	d908      	bls.n	8001ed0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e007      	b.n	8001ee0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ede:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee8:	d10f      	bne.n	8001f0a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d007      	beq.n	8001f28 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f30:	d867      	bhi.n	8002002 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f32:	e030      	b.n	8001f96 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d117      	bne.n	8001f72 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f103 020c 	add.w	r2, r3, #12
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	7812      	ldrb	r2, [r2, #0]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001f70:	e011      	b.n	8001f96 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f72:	f7fe fcc7 	bl	8000904 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d803      	bhi.n	8001f8a <HAL_SPI_Receive+0x19c>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d102      	bne.n	8001f90 <HAL_SPI_Receive+0x1a2>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f94:	e04e      	b.n	8002034 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1c8      	bne.n	8001f34 <HAL_SPI_Receive+0x146>
 8001fa2:	e034      	b.n	800200e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d115      	bne.n	8001fde <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	1c9a      	adds	r2, r3, #2
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001fdc:	e011      	b.n	8002002 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fde:	f7fe fc91 	bl	8000904 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d803      	bhi.n	8001ff6 <HAL_SPI_Receive+0x208>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d102      	bne.n	8001ffc <HAL_SPI_Receive+0x20e>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002000:	e018      	b.n	8002034 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ca      	bne.n	8001fa4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fb4c 	bl	80026b0 <SPI_EndRxTransaction>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	75fb      	strb	r3, [r7, #23]
 8002030:	e000      	b.n	8002034 <HAL_SPI_Receive+0x246>
  }

error :
 8002032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002044:	7dfb      	ldrb	r3, [r7, #23]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b08a      	sub	sp, #40	; 0x28
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800205c:	2301      	movs	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_SPI_TransmitReceive+0x26>
 8002070:	2302      	movs	r3, #2
 8002072:	e1fb      	b.n	800246c <HAL_SPI_TransmitReceive+0x41e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800207c:	f7fe fc42 	bl	8000904 <HAL_GetTick>
 8002080:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002088:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002098:	7efb      	ldrb	r3, [r7, #27]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d00e      	beq.n	80020bc <HAL_SPI_TransmitReceive+0x6e>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a4:	d106      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x66>
 80020ae:	7efb      	ldrb	r3, [r7, #27]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d003      	beq.n	80020bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80020ba:	e1cd      	b.n	8002458 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_SPI_TransmitReceive+0x80>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_SPI_TransmitReceive+0x80>
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80020d4:	e1c0      	b.n	8002458 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d003      	beq.n	80020ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2205      	movs	r2, #5
 80020e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800212c:	d802      	bhi.n	8002134 <HAL_SPI_TransmitReceive+0xe6>
 800212e:	8a3b      	ldrh	r3, [r7, #16]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d908      	bls.n	8002146 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	e007      	b.n	8002156 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002154:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d007      	beq.n	8002174 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002172:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800217c:	d97c      	bls.n	8002278 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_SPI_TransmitReceive+0x13e>
 8002186:	8a7b      	ldrh	r3, [r7, #18]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d169      	bne.n	8002260 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	1c9a      	adds	r2, r3, #2
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021b0:	e056      	b.n	8002260 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d11b      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x1aa>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d016      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0x1aa>
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d113      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	881a      	ldrh	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	1c9a      	adds	r2, r3, #2
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d11c      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x1f2>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	b292      	uxth	r2, r2
 800221e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	1c9a      	adds	r2, r3, #2
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800223c:	2301      	movs	r3, #1
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002240:	f7fe fb60 	bl	8000904 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224c:	429a      	cmp	r2, r3
 800224e:	d807      	bhi.n	8002260 <HAL_SPI_TransmitReceive+0x212>
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d003      	beq.n	8002260 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800225e:	e0fb      	b.n	8002458 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1a3      	bne.n	80021b2 <HAL_SPI_TransmitReceive+0x164>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d19d      	bne.n	80021b2 <HAL_SPI_TransmitReceive+0x164>
 8002276:	e0df      	b.n	8002438 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_SPI_TransmitReceive+0x23a>
 8002280:	8a7b      	ldrh	r3, [r7, #18]
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 80cb 	bne.w	800241e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d912      	bls.n	80022b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	1c9a      	adds	r2, r3, #2
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b02      	subs	r3, #2
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022b6:	e0b2      	b.n	800241e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	330c      	adds	r3, #12
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022de:	e09e      	b.n	800241e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d134      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x30a>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02f      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x30a>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d12c      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d912      	bls.n	800232e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b02      	subs	r3, #2
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800232c:	e012      	b.n	8002354 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d148      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x3aa>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d042      	beq.n	80023f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d923      	bls.n	80023c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	b292      	uxth	r2, r2
 800238a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	1c9a      	adds	r2, r3, #2
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b02      	subs	r3, #2
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d81f      	bhi.n	80023f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	e016      	b.n	80023f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f103 020c 	add.w	r2, r3, #12
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023f4:	2301      	movs	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023f8:	f7fe fa84 	bl	8000904 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002404:	429a      	cmp	r2, r3
 8002406:	d803      	bhi.n	8002410 <HAL_SPI_TransmitReceive+0x3c2>
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240e:	d102      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x3c8>
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800241c:	e01c      	b.n	8002458 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	f47f af5b 	bne.w	80022e0 <HAL_SPI_TransmitReceive+0x292>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f47f af54 	bne.w	80022e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f98f 	bl	8002760 <SPI_EndRxTxTransaction>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	661a      	str	r2, [r3, #96]	; 0x60
 8002454:	e000      	b.n	8002458 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800246c:	4618      	mov	r0, r3
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002484:	f7fe fa3e 	bl	8000904 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	4413      	add	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002494:	f7fe fa36 	bl	8000904 <HAL_GetTick>
 8002498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	0d1b      	lsrs	r3, r3, #20
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024aa:	e054      	b.n	8002556 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d050      	beq.n	8002556 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024b4:	f7fe fa26 	bl	8000904 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d902      	bls.n	80024ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d13d      	bne.n	8002546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e2:	d111      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ec:	d004      	beq.n	80024f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d107      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002510:	d10f      	bne.n	8002532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e017      	b.n	8002576 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3b01      	subs	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4013      	ands	r3, r2
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	bf0c      	ite	eq
 8002566:	2301      	moveq	r3, #1
 8002568:	2300      	movne	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	429a      	cmp	r2, r3
 8002572:	d19b      	bne.n	80024ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200000c0 	.word	0x200000c0

08002584 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002596:	f7fe f9b5 	bl	8000904 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80025a6:	f7fe f9ad 	bl	8000904 <HAL_GetTick>
 80025aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80025b4:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00da      	lsls	r2, r3, #3
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	0d1b      	lsrs	r3, r3, #20
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80025cc:	e060      	b.n	8002690 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025d4:	d107      	bne.n	80025e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d104      	bne.n	80025e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d050      	beq.n	8002690 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025ee:	f7fe f989 	bl	8000904 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d902      	bls.n	8002604 <SPI_WaitFifoStateUntilTimeout+0x80>
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d13d      	bne.n	8002680 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002612:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261c:	d111      	bne.n	8002642 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002626:	d004      	beq.n	8002632 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002630:	d107      	bne.n	8002642 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002640:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264a:	d10f      	bne.n	800266c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e010      	b.n	80026a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3b01      	subs	r3, #1
 800268e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4013      	ands	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d196      	bne.n	80025ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200000c0 	.word	0x200000c0

080026b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026c4:	d111      	bne.n	80026ea <SPI_EndRxTransaction+0x3a>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ce:	d004      	beq.n	80026da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d8:	d107      	bne.n	80026ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff febd 	bl	8002474 <SPI_WaitFlagStateUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e023      	b.n	8002758 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002718:	d11d      	bne.n	8002756 <SPI_EndRxTransaction+0xa6>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002722:	d004      	beq.n	800272e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d113      	bne.n	8002756 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ff22 	bl	8002584 <SPI_WaitFifoStateUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e000      	b.n	8002758 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ff03 	bl	8002584 <SPI_WaitFifoStateUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e027      	b.n	80027e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2200      	movs	r2, #0
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff fe68 	bl	8002474 <SPI_WaitFlagStateUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e014      	b.n	80027e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff fedc 	bl	8002584 <SPI_WaitFifoStateUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e000      	b.n	80027e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <__libc_init_array>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	4d0d      	ldr	r5, [pc, #52]	; (8002824 <__libc_init_array+0x38>)
 80027f0:	4c0d      	ldr	r4, [pc, #52]	; (8002828 <__libc_init_array+0x3c>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	2600      	movs	r6, #0
 80027f8:	42a6      	cmp	r6, r4
 80027fa:	d109      	bne.n	8002810 <__libc_init_array+0x24>
 80027fc:	4d0b      	ldr	r5, [pc, #44]	; (800282c <__libc_init_array+0x40>)
 80027fe:	4c0c      	ldr	r4, [pc, #48]	; (8002830 <__libc_init_array+0x44>)
 8002800:	f000 f820 	bl	8002844 <_init>
 8002804:	1b64      	subs	r4, r4, r5
 8002806:	10a4      	asrs	r4, r4, #2
 8002808:	2600      	movs	r6, #0
 800280a:	42a6      	cmp	r6, r4
 800280c:	d105      	bne.n	800281a <__libc_init_array+0x2e>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	f855 3b04 	ldr.w	r3, [r5], #4
 8002814:	4798      	blx	r3
 8002816:	3601      	adds	r6, #1
 8002818:	e7ee      	b.n	80027f8 <__libc_init_array+0xc>
 800281a:	f855 3b04 	ldr.w	r3, [r5], #4
 800281e:	4798      	blx	r3
 8002820:	3601      	adds	r6, #1
 8002822:	e7f2      	b.n	800280a <__libc_init_array+0x1e>
 8002824:	0800286c 	.word	0x0800286c
 8002828:	0800286c 	.word	0x0800286c
 800282c:	0800286c 	.word	0x0800286c
 8002830:	08002870 	.word	0x08002870

08002834 <memset>:
 8002834:	4402      	add	r2, r0
 8002836:	4603      	mov	r3, r0
 8002838:	4293      	cmp	r3, r2
 800283a:	d100      	bne.n	800283e <memset+0xa>
 800283c:	4770      	bx	lr
 800283e:	f803 1b01 	strb.w	r1, [r3], #1
 8002842:	e7f9      	b.n	8002838 <memset+0x4>

08002844 <_init>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr

08002850 <_fini>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	bf00      	nop
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr
